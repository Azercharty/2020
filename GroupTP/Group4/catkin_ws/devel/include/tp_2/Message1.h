// Generated by gencpp from file tp_2/Message1.msg
// DO NOT EDIT!


#ifndef TP_2_MESSAGE_MESSAGE1_H
#define TP_2_MESSAGE_MESSAGE1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>

namespace tp_2
{
template <class ContainerAllocator>
struct Message1_
{
  typedef Message1_<ContainerAllocator> Type;

  Message1_()
    : Base()  {
    }
  Message1_(const ContainerAllocator& _alloc)
    : Base(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _Base_type;
  _Base_type Base;





  typedef boost::shared_ptr< ::tp_2::Message1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tp_2::Message1_<ContainerAllocator> const> ConstPtr;

}; // struct Message1_

typedef ::tp_2::Message1_<std::allocator<void> > Message1;

typedef boost::shared_ptr< ::tp_2::Message1 > Message1Ptr;
typedef boost::shared_ptr< ::tp_2::Message1 const> Message1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tp_2::Message1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tp_2::Message1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tp_2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'tp_2': ['/home/seb/catkin_ws/src/tp_2/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tp_2::Message1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tp_2::Message1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tp_2::Message1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tp_2::Message1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tp_2::Message1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tp_2::Message1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tp_2::Message1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d811f96aa4121df7305ae402a0611d51";
  }

  static const char* value(const ::tp_2::Message1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd811f96aa4121df7ULL;
  static const uint64_t static_value2 = 0x305ae402a0611d51ULL;
};

template<class ContainerAllocator>
struct DataType< ::tp_2::Message1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tp_2/Message1";
  }

  static const char* value(const ::tp_2::Message1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tp_2::Message1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Twist Base\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::tp_2::Message1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tp_2::Message1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Base);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Message1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tp_2::Message1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tp_2::Message1_<ContainerAllocator>& v)
  {
    s << indent << "Base: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.Base);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TP_2_MESSAGE_MESSAGE1_H
